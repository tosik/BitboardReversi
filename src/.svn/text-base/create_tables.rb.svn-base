# 優先順位表を生成するスクリプト
# make時にこれが実行され、C のコードの書かれた tables ファイルが生成される。(※このコード単体ではファイルは生成されない)
# C ではこのファイルをインクルードしている。

tables = [
  [
    [4,4],
    [9,1,1,9],
    [1,0,0,1],
    [1,0,0,1],
    [9,1,1,9]
  ],
  [
    [4,5],
    [9,1,1,9],
    [1,0,0,1],
    [5,0,0,5],
    [1,1,1,1],
    [9,1,1,9]
  ],
  [
    [5,4],
    [9,1,5,1,9],
    [1,0,0,1,1],
    [1,0,0,1,1],
    [9,1,5,1,9]
  ],
  [
#     [5,5], # 69600ms
#     [9,1,5,1,9],
#     [1,0,0,1,1],
#     [5,0,0,3,5],
#     [1,1,3,1,1],
#     [9,1,5,1,9]

    [5,5], # 299580ms
    [ 6,10, 4, 3,15],
    [ 9, 0, 0, 5,16],
    [23, 0, 0,20,19],
    [22,11,18,17, 7],
    [21,12,13,14, 8]
  ],
  [
    [5,6],
    [9,1,5,1,9],
    [1,1,5,1,1],
    [5,0,0,5,5],
    [5,0,0,5,5],
    [1,1,5,1,1],
    [9,1,5,1,9]
  ],
  [
    [6,5],
    [9,1,5,5,1,9],
    [1,1,0,0,1,1],
    [5,5,0,0,5,5],
    [1,1,5,5,1,1],
    [9,1,5,5,1,9]
  ],
  [
    [6,6],
    [9,1,5,5,1,9],
    [1,1,5,5,1,1],
    [5,5,0,0,5,5],
    [5,5,0,0,5,5],
    [1,1,5,5,1,1],
    [9,1,5,5,1,9]
  ],
  [
    [6,7],
    [9,1,5,5,1,9],
    [1,1,5,5,1,1],
    [5,5,0,0,5,5],
    [5,5,0,0,5,5],
    [5,5,5,5,5,5],
    [1,1,5,5,1,1],
    [9,1,5,5,1,9]
  ],
  [
    [7,6],
    [9,1,5,5,5,1,9],
    [1,1,5,5,5,1,1],
    [5,5,0,0,5,5,5],
    [5,5,0,0,5,5,5],
    [1,1,5,5,5,1,1],
    [9,1,5,5,5,1,9]
  ],
  [
    [7,7],
    [9,1,5,5,5,1,9],
    [1,1,5,5,5,1,1],
    [5,5,0,0,5,5,5],
    [5,5,0,0,5,5,5],
    [5,5,5,5,5,5,5],
    [1,1,5,5,5,1,1],
    [9,1,5,5,5,1,9]
  ],
  [
    [7,8],
    [9,1,5,5,5,1,9],
    [1,1,5,5,5,1,1],
    [5,5,5,5,5,5,5],
    [5,5,0,0,5,5,5],
    [5,5,0,0,5,5,5],
    [5,5,5,5,5,5,5],
    [1,1,5,5,5,1,1],
    [9,1,5,5,5,1,9]
  ],
  [
    [8,7],
    [9,1,5,5,5,5,1,9],
    [1,1,5,5,5,5,1,1],
    [5,5,5,0,0,5,5,5],
    [5,5,5,0,0,5,5,5],
    [5,5,5,5,5,5,5,5],
    [1,1,5,5,5,5,1,1],
    [9,1,5,5,5,5,1,9]
  ],
  [
    [8,8],
    [9,1,5,5,5,5,1,9],
    [1,1,5,5,5,5,1,1],
    [5,5,5,5,5,5,5,5],
    [5,5,5,0,0,5,5,5],
    [5,5,5,0,0,5,5,5],
    [5,5,5,5,5,5,5,5],
    [1,1,5,5,5,5,1,1],
    [9,1,5,5,5,5,1,9]
  ],
]

# はじめの1行かどうかをチェックするフラグ
flag = false

tables.each {|table|
  t = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  sizex = table[0][0]
  sizey = table[0][1]
  if !flag then
    puts "#if SIZE_X == #{sizex} && SIZE_Y == #{sizey}"
    flag = true
  else
    puts "#elif SIZE_X == #{sizex} && SIZE_Y == #{sizey}"
  end
  8.times {|y|
    8.times {|x|
      t.map! {|a| a*2}
      if table.length > y+1 then
        if table[y+1].length > x then
          t[table[y+1][x]] += 1
        end
      end
    }
  }
  t.length.times{|x|
    xx = t.length-x-1
    s = "0x%16.xULL" % t[xx]
    e = s.gsub(" ","0")
    puts "\t\t\tBitboard t#{xx} = #{e} & bits;"
    puts "\t\t\tif ( t#{xx} != 0 ) return getFirstBit(t#{xx});"
  }
}
puts "#endif"

